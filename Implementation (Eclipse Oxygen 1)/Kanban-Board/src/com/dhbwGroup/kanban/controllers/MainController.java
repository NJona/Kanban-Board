package com.dhbwGroup.kanban.controllers;




import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;

import java.util.List;
import java.util.ResourceBundle;

import com.dhbwGroup.kanban.models.ColumnData;
import com.dhbwGroup.kanban.services.KanbanService;
import com.dhbwGroup.kanban.views.Column;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.layout.GridPane;


/**
 * generated by APX file generation template
 * File name: MainController.java
 */
public class MainController implements Initializable {
	@FXML private GridPane boardGridpane;
	
	@FXML private Button toggleLastColumnIsVisible;
	
	private KanbanService kanbanService;
	List<ColumnData> columnsData;
	
	private List<Column> columns = new ArrayList<Column>();
	
	public MainController() throws FileNotFoundException {
		kanbanService = new KanbanService();
		columnsData = kanbanService.loadColumnsFromDB();
		int numberOfColumns = columnsData.size();
		columnsData.forEach((activeColumn) -> {
			columns.add(new Column(numberOfColumns, columnsData.indexOf(activeColumn), activeColumn));
		});;
		
		
		
		
	}
	
    @Override
    public void initialize(URL url, ResourceBundle rb) {
    	
    	columns.forEach((activeColumn) -> {
    		boardGridpane.getColumnConstraints().add(activeColumn.getColumnConstraints());
    		boardGridpane.add(activeColumn.getColumnGridPane(), columns.indexOf(activeColumn), 1);
    		activeColumn.getColumnGridPaneElementButton().getToggleChangeColumnName().setOnAction(new EventHandler<ActionEvent>() {
        	    @Override public void handle(ActionEvent e) {
        	    	handleEditNameEvent(activeColumn);
        	    }
    		});
    	});

		if(columns.size() < 4) {
			toggleLastColumnIsVisible = new Button("Add Column");
		}else {
			toggleLastColumnIsVisible = new Button("Delete Column");
		}
    	createEventHandlerForButtonToggleLastColumnButton();
    	((GridPane) boardGridpane).add(toggleLastColumnIsVisible, 0, 0);
    }
	
	private void handleEditNameEvent(Column activeColumn) {
        if(activeColumn.getColumnGridPaneElementText().getColumnTextLabel().isVisible()) {
        	this.toggleLastColumnIsVisible.setDisable(true);
			activeColumn.getColumnGridPaneElementButton().setButtonText("Save");
			activeColumn.getColumnGridPaneElementText().getColumnTextLabel().setVisible(false);
			activeColumn.getColumnGridPaneElementText().getColumnTextField().setVisible(true);
		}else {
			this.toggleLastColumnIsVisible.setDisable(false);
			activeColumn.getColumnGridPaneElementButton().setButtonText("Edit");
			activeColumn.getColumnGridPaneElementText().getColumnTextLabel().setVisible(true);
			activeColumn.getColumnGridPaneElementText().getColumnTextField().setVisible(false);
			activeColumn.getColumnData().setName(activeColumn.getColumnGridPaneElementText().getColumnTextField().getText());
			activeColumn.getColumnGridPaneElementText().getColumnTextLabel().setText(activeColumn.getColumnGridPaneElementText().getColumnTextField().getText());
			columnsData.set(activeColumn.getColumnIndex(), activeColumn.getColumnData());
			try {
				updateDataBase();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
	}

	public void addColumn(String columnName){
		ColumnData newColumnData = new ColumnData(columnName);
		columnsData.add(newColumnData);
		Column newColumn = new Column(columnsData.size(), columnsData.indexOf(newColumnData), newColumnData);
		columns.add(newColumn);
		newColumn.getColumnGridPaneElementButton().getToggleChangeColumnName().setOnAction(new EventHandler<ActionEvent>() {
    	    @Override public void handle(ActionEvent e) {
    	    	handleEditNameEvent(newColumn);
    	    }
		});
		updateColumnSize();
		boardGridpane.getColumnConstraints().add(newColumn.getColumnConstraints());
		boardGridpane.add(newColumn.getColumnGridPane(), columns.indexOf(newColumn), 1);
	}
	
	private void removeColumn() {
		boardGridpane.getColumnConstraints().remove(columnsData.size()-1);
		boardGridpane.getChildren().remove(columns.get(columnsData.size()-1).getColumnGridPane());
		columnsData.remove(columnsData.size()-1);
		columns.remove(columns.size()-1);
		updateColumnSize();
	} 

	private void updateColumnSize() {
		columns.forEach((activeColumn) -> {
			activeColumn.setNumberOfColumns(columns.size());
		});
		
	}

	private void createEventHandlerForButtonToggleLastColumnButton() {
    	toggleLastColumnIsVisible.setOnAction(new EventHandler<ActionEvent>() {
    	    @Override public void handle(ActionEvent e) {
    	        try {
					handleToggleLastColumnButtonPressed(e);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
    	    }
    	});
	}

	@FXML protected void handleToggleLastColumnButtonPressed(ActionEvent event) throws IOException {
		if(columns.size() < 4) {
			toggleLastColumnIsVisible.setText("Delete Column");
			this.addColumn("new Column");
		}else {
			toggleLastColumnIsVisible.setText("Add Column");
			this.removeColumn();
		}
		updateDataBase();
    }
	
	private void updateDataBase() throws IOException {
		kanbanService.saveColumnsToDB(columnsData);
	}
}
