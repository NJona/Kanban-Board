package com.dhbwGroup.kanban.controllers;




import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;

import java.util.List;
import java.util.ResourceBundle;

import com.dhbwGroup.kanban.models.ColumnData;
import com.dhbwGroup.kanban.models.TaskData;
import com.dhbwGroup.kanban.services.KanbanService;
import com.dhbwGroup.kanban.views.Column;
import com.dhbwGroup.kanban.views.Task;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.layout.GridPane;


/**
 * generated by APX file generation template
 * File name: MainController.java
 */
public class MainController implements Initializable {
	@FXML private GridPane boardGridpane;
	
	@FXML private Button toggleLastColumnIsVisible;
	
	private KanbanService kanbanService;
	private List<ColumnData> columnsData;
	private List<TaskData> tasksData;
	
	private List<Column> columns = new ArrayList<Column>();
	private List<Task> tasks = new ArrayList<Task>();
	
	public MainController() throws FileNotFoundException {
		kanbanService = new KanbanService();
		columnsData = kanbanService.loadColumnsFromDB();
		tasksData = kanbanService.loadTasksFromDB();
	}
	
    @Override
    public void initialize(URL url, ResourceBundle rb) {    	
    	
    	boardGridpane.getStyleClass().add("boardGridpane");
    	
    	createColumns();
    	
    	createTasks();

    	createButtonToggleLastColumn();
    }
    
    public void moveTask(Task taskToMove, int newColumnIndex) {
    	//TODO
    	//update TaskData and save in DB
    	/*
    	if(taskToMove.getTaskData().getColumnIndex() != newColumnIndex) {
        	taskToMove.getTaskData().setColumnIndex(newColumnIndex);
        	
        	boardGridpane.getChildren().remove(taskToMove.getTaskGridPane());
        	boardGridpane.add(taskToMove.getTaskGridPane(), newColumnIndex, getRowIndex(taskToMove));   		
    	}
    	*/
    }
    
    private int getRowIndex(Task activeTask) {
		int numberOfTasksInColumn = columns.get(activeTask.getTaskData().getColumnIndex()).getColumnData().getNumberOfTasks();
		int rowIndex = numberOfTasksInColumn + 2; // ColumnName and AddColumn Button
		columns.get(activeTask.getTaskData().getColumnIndex()).getColumnData().setNumberOfTasks(numberOfTasksInColumn +1 );    	
		return rowIndex;
    }

	private void createColumns() {
    	createColumnViewForEeachColumnData();
    	addEachColumnViewToBoardGridpane();
    	createEventHandlerForEachEditColumnNameButton();
	}
	
	private void createTasks() {
    	createTaskViewForEeachTaskData();
    	addEachTaskViewToBoardGridpane();
	}

	private void addEachTaskViewToBoardGridpane() {
		if(!tasks.isEmpty()) {
	    	tasks.forEach((activeTask) -> {
	    		int rowIndex = getRowIndex(activeTask);
	    		boardGridpane.add(activeTask.getTaskGridPane(), activeTask.getTaskData().getColumnIndex(), rowIndex);
	    	});			
		}
	}

	private void createTaskViewForEeachTaskData() {
		if(!tasksData.isEmpty()) {
			tasksData.forEach((activeTask) -> {
				tasks.add(new Task(activeTask));
			});;			
		}
	}

	public void createButtonToggleLastColumn() {
		if(columns.size() < 4) {
			toggleLastColumnIsVisible = new Button("Add Column");
		}else {
			toggleLastColumnIsVisible = new Button("Delete Column");
		}
    	createEventHandlerForButtonToggleLastColumnButton();
    	boardGridpane.add(toggleLastColumnIsVisible, 0, 0);
	}

	public void addEachColumnViewToBoardGridpane() {
		if(!columns.isEmpty()) {
	    	columns.forEach((activeColumn) -> {
	    		boardGridpane.getColumnConstraints().add(activeColumn.getColumnConstraints());
	    		boardGridpane.add(activeColumn.getColumnGridPane(), columns.indexOf(activeColumn), 1);
	    	});			
		}
	}

	public void createColumnViewForEeachColumnData() {
		int numberOfColumns = columnsData.size();
		if(!columnsData.isEmpty()) {
			columnsData.forEach((activeColumn) -> {
				activeColumn.setNumberOfTasks(0);
				columns.add(new Column(numberOfColumns, getColumnsData().indexOf(activeColumn), activeColumn));
			});;			
		}
	}
	
	public void createEventHandlerForEachEditColumnNameButton() {
		if(!columns.isEmpty()) {
	    	columns.forEach((activeColumn) -> {
	    		activeColumn.getColumnGridPaneElementButton().getToggleChangeColumnName().setOnAction(new EventHandler<ActionEvent>() {
	        	    @Override public void handle(ActionEvent e) {
	        	    	handleEditNameEvent(activeColumn);
	        	    }
	    		});
	    	});			
		}
	}
	
	private void handleEditNameEvent(Column activeColumn) {
        if(activeColumn.getColumnGridPaneElementText().getColumnTextLabel().isVisible()) {
        	this.toggleLastColumnIsVisible.setDisable(true);
			activeColumn.getColumnGridPaneElementButton().setButtonText("Save");
			activeColumn.getColumnGridPaneElementText().getColumnTextLabel().setVisible(false);
			activeColumn.getColumnGridPaneElementText().getColumnTextField().setVisible(true);
		}else {
			this.toggleLastColumnIsVisible.setDisable(false);
			activeColumn.getColumnGridPaneElementButton().setButtonText("Edit");
			activeColumn.getColumnGridPaneElementText().getColumnTextLabel().setVisible(true);
			activeColumn.getColumnGridPaneElementText().getColumnTextField().setVisible(false);
			activeColumn.getColumnData().setName(activeColumn.getColumnGridPaneElementText().getColumnTextField().getText());
			activeColumn.getColumnGridPaneElementText().getColumnTextLabel().setText(activeColumn.getColumnGridPaneElementText().getColumnTextField().getText());
			getColumnsData().set(activeColumn.getColumnIndex(), activeColumn.getColumnData());
			try {
				updateDataBase();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
	}

	public void addColumn(String columnName){
		ColumnData newColumnData = new ColumnData(columnName);
		getColumnsData().add(newColumnData);
		Column newColumn = new Column(getColumnsData().size(), getColumnsData().indexOf(newColumnData), newColumnData);
		columns.add(newColumn);
		newColumn.getColumnGridPaneElementButton().getToggleChangeColumnName().setOnAction(new EventHandler<ActionEvent>() {
    	    @Override public void handle(ActionEvent e) {
    	    	handleEditNameEvent(newColumn);
    	    }
		});
		updateColumnSize();
		boardGridpane.getColumnConstraints().add(newColumn.getColumnConstraints());
		boardGridpane.add(newColumn.getColumnGridPane(), columns.indexOf(newColumn), 1);
	}
	
	private void removeColumn() {
		boardGridpane.getColumnConstraints().remove(getColumnsData().size()-1);
		boardGridpane.getChildren().remove(columns.get(getColumnsData().size()-1).getColumnGridPane());
		getColumnsData().remove(getColumnsData().size()-1);
		columns.remove(columns.size()-1);
		updateColumnSize();
	} 

	private void updateColumnSize() {
		columns.forEach((activeColumn) -> {
			activeColumn.setNumberOfColumns(columns.size());
		});
		
	}

	private void createEventHandlerForButtonToggleLastColumnButton() {
    	toggleLastColumnIsVisible.setOnAction(new EventHandler<ActionEvent>() {
    	    @Override public void handle(ActionEvent e) {
    	        try {
					handleToggleLastColumnButtonPressed(e);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
    	    }
    	});
	}

	@FXML protected void handleToggleLastColumnButtonPressed(ActionEvent event) throws IOException {
		if(columns.size() < 4) {
			toggleLastColumnIsVisible.setText("Delete Column");
			this.addColumn("new Column");
		}else {
			toggleLastColumnIsVisible.setText("Add Column");
			this.removeColumn();
		}
		updateDataBase();
    }
	
	private void updateDataBase() throws IOException {
		kanbanService.saveColumnsToDB(columnsData);
	}

	public List<ColumnData> getColumnsData() {
		return columnsData;
	}

	public void setColumnsData(List<ColumnData> columnsData) {
		this.columnsData = columnsData;
	}
}
