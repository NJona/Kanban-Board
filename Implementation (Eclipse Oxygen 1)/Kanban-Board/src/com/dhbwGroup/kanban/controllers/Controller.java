package com.dhbwGroup.kanban.controllers;




import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import com.dhbwGroup.kanban.views.Column;
import com.dhbwGroup.kanban.views.Task;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.layout.GridPane;


/**
 * generated by APX file generation template
 * File name: MainController.java
 */
public class Controller implements Initializable {
	@FXML private GridPane boardGridpane;
	private Button toggleLastColumn;
	
	private TaskController taskController;
	private ColumnController columnController;
	
	public Controller() throws FileNotFoundException {
		taskController = new TaskController();
		columnController = new ColumnController();
	}
	
    @Override
    public void initialize(URL url, ResourceBundle rb) {    	
    	
    	boardGridpane.getStyleClass().add("boardGridpane");
    	
    	addEachTaskViewToBoardGridpane();
    	
    	addEachColumnViewToBoardGridpane();

    	createButtonToggleLastColumn();
    	
    	addButtonToggleLastColumnToGridpane();
    }

//-----------------------------------------------------------------------------------	
//-------------------------------Add Views to GridPane-------------------------------
//-----------------------------------------------------------------------------------
    
	public void addEachColumnViewToBoardGridpane() {
		if(!columnController.getColumns().isEmpty()) {
			columnController.getColumns().forEach((activeColumn) -> {
	    		boardGridpane.getColumnConstraints().add(activeColumn.getColumnConstraints());
	    		boardGridpane.add(activeColumn.getColumnGridPane(), columnController.getColumns().indexOf(activeColumn), 1);
	    	});			
		}
	}
    
	private void addEachTaskViewToBoardGridpane() {
		if(!taskController.getTasks().isEmpty()) {
			taskController.getTasks().forEach((activeTask) -> {
	    		int rowIndex = getRowIndex(activeTask);
	    		boardGridpane.add(activeTask.getTaskGridPane(), activeTask.getTaskData().getColumnIndex(), rowIndex);
	    	});			
		}
	}
	
    private int getRowIndex(Task activeTask) {
		int numberOfTasksInColumn = columnController.getColumns().get(activeTask.getTaskData().getColumnIndex()).getColumnData().getNumberOfTasks();
		int rowIndex = numberOfTasksInColumn + 2; // ColumnName and AddColumn Button
		columnController.getColumns().get(activeTask.getTaskData().getColumnIndex()).getColumnData().setNumberOfTasks(numberOfTasksInColumn +1 );    	
		return rowIndex;
    }
	
	public void addButtonToggleLastColumnToGridpane() {
		boardGridpane.add(toggleLastColumn, 0, 0);
	}
	
//-----------------------------------------------------------------------------------	
//-------------------Methods Button Add / Remove Last Column-------------------------
//-----------------------------------------------------------------------------------
	
	public void createButtonToggleLastColumn() {
		if(columnController.getColumns().size() < 4) {
			toggleLastColumn = new Button("Add Column");
		}else {
			toggleLastColumn = new Button("Delete Column");
		}
    	createEventHandlerForButtonToggleLastColumnButton();
	}
	
	private void createEventHandlerForButtonToggleLastColumnButton() {
    	toggleLastColumn.setOnAction(new EventHandler<ActionEvent>() {
    	    @Override public void handle(ActionEvent e) {
    	        try {
					handleToggleLastColumnButtonPressed(e);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
    	    }
    	});
	}
	
	@FXML protected void handleToggleLastColumnButtonPressed(ActionEvent event) throws IOException {
		if(columnController.getColumns().size() < 4) {
			toggleLastColumn.setText("Delete Column");
			Column columnToAdd = columnController.addColumn("new Column");
			boardGridpane.getColumnConstraints().add(columnToAdd.getColumnConstraints());
			boardGridpane.add(columnToAdd.getColumnGridPane(), columnController.getColumns().indexOf(columnToAdd), 1);
		}else {
			toggleLastColumn.setText("Add Column");
			Column columnToRemove = columnController.removeColumn();
			boardGridpane.getColumnConstraints().remove(columnToRemove.getColumnConstraints());
			boardGridpane.getChildren().remove(columnToRemove.getColumnGridPane());
		}
    }
}
