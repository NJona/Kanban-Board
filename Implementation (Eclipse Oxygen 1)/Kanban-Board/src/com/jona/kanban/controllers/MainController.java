package com.jona.kanban.controllers;



import javafx.event.ActionEvent;
import javafx.event.EventHandler;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import com.jona.kanban.services.ColumnService;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.HPos;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.text.Text;

/**
 * generated by APX file generation template
 * File name: MainController.java
 */
public class MainController implements Initializable {
	@FXML private GridPane boardGridpane;
	@FXML private GridPane[] columnsGridpane;
	@FXML private ColumnConstraints[] columns;
	@FXML private Text[] columnNameTextLabel;
	@FXML private TextField[] columnNameTextField;
	@FXML private Button[] columnEditNameButton;
	@FXML private Button toggleLastColumnIsVisible;
	
	private int columnLength;
	
	private ColumnService columnService;
	
	public MainController() throws FileNotFoundException {
		columnService = new ColumnService();
		columnService.loadColumns();
		columnLength = columnService.getColumnNamesLength();
		
    	columnsGridpane = new GridPane[columnLength];
    	columns = new ColumnConstraints[columnLength];
    	columnNameTextLabel = new Text[columnLength];
    	columnNameTextField = new TextField[columnLength];
    	columnEditNameButton = new Button[columnLength];
	}
	
    @Override
    public void initialize(URL url, ResourceBundle rb) {
    	
    	for(int columnIndex = 0; columnIndex<columnLength;columnIndex++) {
    		setColumnProperties(columnIndex);
    		
    		addGridpaneToColumn(columnIndex);
    	}
    
    	createButtonToggleLastColumn();
    }  
    
    private void createButtonToggleLastColumn() {
    	if(isLastColumnActive()) {
    		createToggleLastColumnButton("Delete");
    	}else {
    		createToggleLastColumnButton("Add");
    	}
    	createEventHandlerForButtonToggleLastColumnButton();
    	((GridPane) boardGridpane).add(toggleLastColumnIsVisible, columnLength-1, 0);
		
	}
    
    

	private void createToggleLastColumnButton(String deleteOrAdd) {
		toggleLastColumnIsVisible = new Button(deleteOrAdd + " Column");
	}

	private void createEventHandlerForButtonToggleLastColumnButton() {
    	toggleLastColumnIsVisible.setOnAction(new EventHandler<ActionEvent>() {
    	    @Override public void handle(ActionEvent e) {
    	        try {
					handleToggleLastColumnButtonPressed(e);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
    	    }
    	});
	}

	private boolean isLastColumnActive() {
		return columnService.getColumnIsActive(columnLength-1);
	}

	private void addGridpaneToColumn(int columnIndex) {
		columnsGridpane[columnIndex] = new GridPane();    		
		
		setBackgroundColorForColumn(columnIndex);
		
		setVisibilityOfColumn(columnIndex);
		
		setColumnElementsWidth(columnIndex);
		
		setColumnElements(columnIndex);
		
		((GridPane) boardGridpane).add(columnsGridpane[columnIndex], columnIndex, 1);
		
	}

	private void setColumnElements(int columnIndex) {
		addTextLabelColumnName(columnIndex);
		addTextFieldColumnName(columnIndex);
		addButtonChangeColumnName(columnIndex);
	}

	private void addButtonChangeColumnName(int columnIndex) {
		columnEditNameButton[columnIndex] = new Button("Edit");
		columnEditNameButton[columnIndex].setUserData(columnIndex);
		createEventHandlerForButtonEditColumnName(columnIndex);
		columnsGridpane[columnIndex].add(columnEditNameButton[columnIndex], 1, 0);
	}

	private void addTextFieldColumnName(int columnIndex) {
		columnNameTextField[columnIndex] = new TextField(columnService.getColumnName(columnIndex));
		columnNameTextField[columnIndex].setVisible(false);
		columnsGridpane[columnIndex].add(columnNameTextField[columnIndex], 0, 0);
	}

	private void addTextLabelColumnName(int columnIndex) {
		columnNameTextLabel[columnIndex] = new Text(columnService.getColumnName(columnIndex));
		columnsGridpane[columnIndex].add(columnNameTextLabel[columnIndex], 0, 0);
	}

	private void createEventHandlerForButtonEditColumnName(int columnIndex) {
		columnEditNameButton[columnIndex].setOnAction(new EventHandler<ActionEvent>() {
    	    @Override public void handle(ActionEvent e) {
    	        try {
					handleEditColumnNameButtonPressed(e);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
    	    }
    	});
	}

	private void setColumnElementsWidth(int columnIndex) {
		ColumnConstraints columnName = new ColumnConstraints();
		columnName.setPercentWidth(90);
		ColumnConstraints columnEditNameButton = new ColumnConstraints();
		columnEditNameButton.setPercentWidth(10);
		columnsGridpane[columnIndex].getColumnConstraints().addAll(columnName, columnEditNameButton);
	}

	private void setVisibilityOfColumn(int columnIndex) {
		columnsGridpane[columnIndex].setVisible(columnService.getColumnIsActive(columnIndex));
	}

	private void setBackgroundColorForColumn(int columnIndex) {
		if(isColumnIndexEven(columnIndex)) {
			setBackgroundColorForEvenColumn(columnIndex);	
		}else {
			setBackgroundColorForOddColumn(columnIndex);
		}
	}
	
	private boolean isColumnIndexEven(int columnIndex) {
		return columnIndex%2==0;
	}

	private void setBackgroundColorForOddColumn(int columnIndex) {
		columnsGridpane[columnIndex].setStyle("-fx-background-color: grey;");
	}

	private void setBackgroundColorForEvenColumn(int columnIndex) {
		columnsGridpane[columnIndex].setStyle("-fx-background-color: white;");
	}

	private void setColumnProperties(int columnIndex) {
		columns[columnIndex] = new ColumnConstraints();
		columns[columnIndex].setPercentWidth((int)(100 / columnLength));
		columns[columnIndex].setHalignment(HPos.CENTER);
		
		boardGridpane.getColumnConstraints().add(columns[columnIndex]);
	}

	//Todo: Refactor
	@FXML protected void handleToggleLastColumnButtonPressed(ActionEvent event) throws IOException {
    	columnService.setColumnIsActive(columnLength-1, !columnService.getColumnIsActive(columnLength-1));
    	columnsGridpane[columnsGridpane.length-1].setVisible(columnService.getColumnIsActive(columnLength-1));
    	if(columnService.getColumnIsActive(columnLength-1)) {
    		this.toggleLastColumnIsVisible.setText("Delete Column");
    	}else {
    		this.toggleLastColumnIsVisible.setText("Add Column");
    	}
    } 
	
	//Todo: Refactor
    @FXML protected void handleEditColumnNameButtonPressed(ActionEvent event) throws IOException { 
    	int columnIndex = (int) ((Button) event.getSource()).getUserData();
    	if(columnNameTextLabel[columnIndex].isVisible()) {        	
        	((Button) event.getSource()).setText("Save");
        	columnNameTextLabel[columnIndex].setVisible(!columnNameTextLabel[columnIndex].isVisible());
        	columnNameTextField[columnIndex].setVisible(!columnNameTextField[columnIndex].isVisible());    		
    	}else {
        	((Button) event.getSource()).setText("Edit");
        	columnNameTextLabel[columnIndex].setVisible(!columnNameTextLabel[columnIndex].isVisible());
        	columnNameTextField[columnIndex].setVisible(!columnNameTextField[columnIndex].isVisible());
        	columnService.setColumnName(columnIndex, columnNameTextField[columnIndex].getText());
        	columnNameTextLabel[columnIndex].setText(columnNameTextField[columnIndex].getText());
    	}
    }
    
}
